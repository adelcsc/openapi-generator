{{#models}}
    {{#model}}
{{#imports}}
use crate::models::{{#lambda.lowercase}}{{.}}{{/lambda.lowercase}}::{{#lambda.lowercase}}{{.}}{{/lambda.lowercase}}::{{.}};
{{/imports}}
use serde::{Deserialize,Serialize};
#[derive(Deserialize,Serialize)]
pub struct {{name}} {
    {{#allVars}}
    pub {{baseName}} : {{^required}}Option<{{/required}}{{dataType}}{{#isContainer}}<{{complexType}}>{{/isContainer}}{{^required}}>{{/required}},
    {{/allVars}}
}
impl {{name}} {
    pub fn default() -> {{name}}{
    {{name}} {
    {{#allVars}}
        {{baseName}} : {{^required}}Some({{#isArray}}vec![{{/isArray}}{{/required}}{{#isNumeric}}54{{/isNumeric}}{{#isString}}"RandomString".to_string(){{/isString}}{{#isContainer}}{{complexType}}::default(){{/isContainer}}{{#isFreeFormObject}}serde_json::from_str("{}").unwrap(){{/isFreeFormObject}}{{#isArray}}]{{/isArray}}{{^required}}){{/required}},
    {{/allVars}}
        }
    }
}
    {{/model}}
{{/models}}
